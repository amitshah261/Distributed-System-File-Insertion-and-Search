This is file 2

A distributed hash table (DHT) is a class of a decentralized distributed system that provides a lookup service similar to a hash table: (key, value) pairs are stored in a DHT, and any participating node can efficiently retrieve the value associated with a given key. Responsibility for maintaining the mapping from keys to values is distributed among the nodes, in such a way that a change in the set of participants causes a minimal amount of disruption. This allows a DHT to scale to extremely large numbers of nodes and to handle continual node arrivals, departures, and failures.

DHTs form an infrastructure that can be used to build more complex services, such as anycast, cooperative Web caching, distributed file systems, domain name services, instant messaging, multicast, and also peer-to-peer file sharing and content distribution systems. Notable distributed networks that use DHTs include BitTorrent's distributed tracker, the Coral Content Distribution Network, the Kad network, the Storm botnet, the Tox instant messenger, Freenet and the YaCy search engine.


Distributed hash tables
Contents  [hide] 
1	History
2	Properties
3	Structure
3.1	Keyspace partitioning
3.1.1	Consistent hashing
3.1.2	Rendezvous hashing
3.1.3	Locality-preserving hashing
3.2	Overlay network
3.3	Algorithms for overlay networks
4	Security
5	DHT implementations
6	Examples
7	See also
8	References
9	External links
History[edit]
DHT research was originally motivated, in part, by peer-to-peer systems such as Freenet, gnutella, BitTorrent and Napster, which took advantage of resources distributed across the Internet to provide a single useful application. In particular, they took advantage of increased bandwidth and hard disk capacity to provide a file-sharing service.[citation needed]

These systems differed in how they located the data offered by their peers. Napster, the first large-scale P2P content delivery system, required a central index server: each node, upon joining, would send a list of locally held files to the server, which would perform searches and refer the queries to the nodes that held the results. This central component left the system vulnerable to attacks and lawsuits.

Gnutella and similar networks moved to a flooding query model – in essence, each search would result in a message being broadcast to every other machine in the network. While avoiding a single point of failure, this method was significantly less efficient than Napster. Later versions of Gnutella clients moved to a dynamic querying model which vastly improved efficiency.[citation needed]

Freenet is fully distributed, but employs a heuristic key-based routing in which each file is associated with a key, and files with similar keys tend to cluster on a similar set of nodes. Queries are likely to be routed through the network to such a cluster without needing to visit many peers.[1] However, Freenet does not guarantee that data will be found.

Distributed hash tables use a more structured key-based routing in order to attain both the decentralization of Freenet and gnutella, and the efficiency and guaranteed results of Napster. One drawback is that, like Freenet, DHTs only directly support exact-match search, rather than keyword search, although Freenet's routing algorithm can be generalized to any key type where a closeness operation can be defined.[2]

In 2001, four systems—CAN,[3] Chord,[4] Pastry, and Tapestry—ignited DHTs as a popular research topic. A project called the Infrastructure for Resilient Internet Systems (Iris) was funded by a $12 million grant from the US National Science Foundation in 2002.[5] Researchers included Sylvia Ratnasamy, Ion Stoica, Hari Balakrishnan and Scott Shenker.[6] Outside academia, DHT technology has been adopted as a component of BitTorrent and in the Coral Content Distribution Network.

Properties[edit]
DHTs characteristically emphasize the following properties:

Autonomy and decentralization: the nodes collectively form the system without any central coordination.
Fault tolerance: the system should be reliable (in some sense) even with nodes continuously joining, leaving, and failing.
Scalability: the system should function efficiently even with thousands or millions of nodes.
A key technique used to achieve these goals is that any one node needs to coordinate with only a few other nodes in the system – most commonly, O(log n) of the {\displaystyle n} n participants (see below) – so that only a limited amount of work needs to be done for each change in membership.

Some DHT designs seek to be secure against malicious participants[7] and to allow participants to remain anonymous, though this is less common than in many other peer-to-peer (especially file sharing) systems; see anonymous P2P.

Finally, DHTs must deal with more traditional distributed systems issues such as load balancing, data integrity, and performance (in particular, ensuring that operations such as routing and data storage or retrieval complete quickly).

Structure[edit]
The structure of a DHT can be decomposed into several main components.[8][9] The foundation is an abstract keyspace, such as the set of 160-bit strings. A keyspace partitioning scheme splits ownership of this keyspace among the participating nodes. An overlay network then connects the nodes, allowing them to find the owner of any given key in the keyspace.

Once these components are in place, a typical use of the DHT for storage and retrieval might proceed as follows. Suppose the keyspace is the set of 160-bit strings. To store a file with given filename and data in the DHT, the SHA-1 hash of filename is generated, producing a 160-bit key k, and a message put(k, data) is sent to any node participating in the DHT. The message is forwarded from node to node through the overlay network until it reaches the single node responsible for key k as specified by the keyspace partitioning. That node then stores the key and the data. Any other client can then retrieve the contents of the file by again hashing filename to produce k and asking any DHT node to find the data associated with k with a message get(k). The message will again be routed through the overlay to the node responsible for k, which will reply with the stored data.

The keyspace partitioning and overlay network components are described below with the goal of capturing the principal ideas common to most DHTs; many designs differ in the details.

Keyspace partitioning[edit]
Most DHTs use some variant of consistent hashing or rendezvous hashing to map keys to nodes. The two algorithms appear to have been devised independently and simultaneously to solve the distributed hash table problem.

Both consistent hashing and rendezvous hashing have the essential property that removal or addition of one node changes only the set of keys owned by the nodes with adjacent IDs, and leaves all other nodes unaffected. Contrast this with a traditional hash table in which addition or removal of one bucket causes nearly the entire keyspace to be remapped. Since any change in ownership typically corresponds to bandwidth-intensive movement of objects stored in the DHT from one node to another, minimizing such reorganization is required to efficiently support high rates of churn (node arrival and failure).

Consistent hashing[edit]
Consistent hashing employs a function {\displaystyle \delta (k_{1},k_{2})} \delta (k_{1},k_{2}) that defines an abstract notion of the distance between the keys {\displaystyle k_{1}} k_{1} and {\displaystyle k_{2}} k_{2}, which is unrelated to geographical distance or network latency. Each node is assigned a single key called its identifier (ID). A node with ID {\displaystyle i_{x}} i_{x} owns all the keys {\displaystyle k_{m}} k_{m} for which {\displaystyle i_{x}} i_{x} is the closest ID, measured according to {\displaystyle \delta (k_{m},i_{x})} \delta (k_{m},i_{x}).

For example, the Chord DHT uses consistent hashing, which treats keys as points on a circle, and {\displaystyle \delta (k_{1},k_{2})} \delta (k_{1},k_{2}) is the distance traveling clockwise around the circle from {\displaystyle k_{1}} k_{1} to {\displaystyle k_{2}} k_{2}. Thus, the circular keyspace is split into contiguous segments whose endpoints are the node identifiers. If {\displaystyle i_{1}} i_{1} and {\displaystyle i_{2}} i_{2} are two adjacent IDs, with a shorter clockwise distance from {\displaystyle i_{1}} i_{1} to {\displaystyle i_{2}} i_{2}, then the node with ID {\displaystyle i_{2}} i_{2} owns all the keys that fall between {\displaystyle i_{1}} i_{1} and {\displaystyle i_{2}} i_{2}.

Rendezvous hashing[edit]
In rendezvous hashing, also called highest random weight hashing, all clients use the same hash function h() (chosen ahead of time) to associate a key to one of the n available servers. Each client has the same list of identifiers {S1, S2, ..., Sn }, one for each server. Given some key k, a client computes n hash weights w1 = h(S1, k), w2 = h(S2, k), ..., wn = h(Sn, k). The client associates that key with the server corresponding to the highest hash weight for that key. A server with ID {\displaystyle S_{x}} S_{x} owns all the keys {\displaystyle k_{m}} k_{m} for which the hash weight {\displaystyle h(S_{x},k_{m})} h(S_{x},k_{m}) is higher than the hash weight of any other node for that key.

Locality-preserving hashing[edit]
Locality-preserving hashing ensures that similar keys are assigned to similar objects. This can enable a more efficient execution of range queries. Self-Chord [10] decouples object keys from peer IDs and sorts keys along the ring with a statistical approach based on the swarm intelligence paradigm. Sorting ensures that similar keys are stored by neighbour nodes and that discovery procedures, including range queries, can be performed in logarithmic time.

Overlay network[edit]
Each node maintains a set of links to other nodes (its neighbors or routing table) . Together, these links form the overlay network. A node picks its neighbors according to a certain structure, called the network's topology.

All DHT topologies share some variant of the most essential property: for any key k, each node either has a node ID that owns k or has a link to a node whose node ID is closer to k, in terms of the keyspace distance defined above. It is then easy to route a message to the owner of any key k using the following greedy algorithm (that is not necessarily globally optimal): at each step, forward the message to the neighbor whose ID is closest to k. When there is no such neighbor, then we must have arrived at the closest node, which is the owner of k as defined above. This style of routing is sometimes called key-based routing.

Beyond basic routing correctness, two important constraints on the topology are to guarantee that the maximum number of hops in any route (route length) is low, so that requests complete quickly; and that the maximum number of neighbors of any node (maximum node degree) is low, so that maintenance overhead is not excessive. Of course, having shorter routes requires higher maximum degree. Some common choices for maximum degree and route length are as follows, where n is the number of nodes in the DHT, using Big O notation:

Max. degree	Route length	Used in	Note
{\displaystyle O(1)} O(1)	{\displaystyle O(n)} O(n)		
{\displaystyle O(\log n)} O(\log n)	{\displaystyle O(\log n/\log(\log n))} O(\log n/\log(\log n))	Koorde	
{\displaystyle O(\log n)} O(\log n)	{\displaystyle O(\log n)} O(\log n)	Chord	most common, but not optimal (degree/route length)
{\displaystyle O(1)} O(1)	{\displaystyle O(\log n)} O(\log n)		
{\displaystyle O({\sqrt {n}})} O({\sqrt {n}})	{\displaystyle O(1)} O(1)		
The most common choice, {\displaystyle O(\log n)} O(\log n) degree/route length, is not optimal in terms of degree/route length tradeoff, but such topologies typically allow more flexibility in choice of neighbors. Many DHTs use that flexibility to pick neighbors that are close in terms of latency in the physical underlying network.

Maximum route length is closely related to diameter: the maximum number of hops in any shortest path between nodes. Clearly, the network's worst case route length is at least as large as its diameter, so DHTs are limited by the degree/diameter tradeoff[11] that is fundamental in graph theory. Route length can be greater than diameter, since the greedy routing algorithm may not find shortest paths.[12]

Algorithms for overlay networks[edit]
Aside from routing, there exist many algorithms that exploit the structure of the overlay network for sending a message to all nodes, or a subset of nodes, in a DHT.[13] These algorithms are used by applications to do overlay multicast, range queries, or to collect statistics. Two systems that are based on this approach are Structella,[14] which implements flooding and random walks on a Pastry overlay, and DQ-DHT,[15] which implements a dynamic querying search algorithm over a Chord network.

Security[edit]
Because of the decentralization, fault tolerance, and scalability of DHTs, they are inherently more resilient against a hostile attacker than a typical centralized system.[vague]

Open systems for distributed data storage that are robust against massive hostile attackers are feasible.[16]

A DHT system that is carefully designed to have Byzantine fault tolerance can defend against a Sybil attack.[17][18]

DHT implementations[edit]
Most notable differences encountered in practical instances of DHT implementations include at least the following:

The address space is a parameter of DHT. Several real world DHTs use 128-bit or 160-bit key space
Some real-world DHTs use hash functions other than SHA-1.
In the real world the key {\displaystyle k} k could be a hash of a file's content rather than a hash of a file's name to provide content-addressable storage, so that renaming of the file does not prevent users from finding it.
Some DHTs may also publish objects of different types. For example, key {\displaystyle k} k could be the node {\displaystyle ID} ID and associated data could describe how to contact this node. This allows publication-of-presence information and often used in IM applications, etc. In the simplest case, {\displaystyle ID} ID is just a random number that is directly used as key {\displaystyle k} k (so in a 160-bit DHT {\displaystyle ID} ID will be a 160-bit number, usually randomly chosen). In some DHTs, publishing of nodes' IDs is also used to optimize DHT operations.
Redundancy can be added to improve reliability. The {\displaystyle (k,data)} (k,data) key pair can be stored in more than one node corresponding to the key. Usually, rather than selecting just one node, real world DHT algorithms select {\displaystyle i} i suitable nodes, with {\displaystyle i} i being an implementation-specific parameter of the DHT. In some DHT designs, nodes agree to handle a certain keyspace range, the size of which may be chosen dynamically, rather than hard-coded.
Some advanced DHTs like Kademlia perform iterative lookups through the DHT first in order to select a set of suitable nodes and send {\displaystyle put(k,data)} put(k,data) messages only to those nodes, thus drastically reducing useless traffic, since published messages are only sent to nodes that seem suitable for storing the key {\displaystyle k} k; and iterative lookups cover just a small set of nodes rather than the entire DHT, reducing useless forwarding. In such DHTs, forwarding of {\displaystyle put(k,data)} put(k,data) messages may only occur as part of a self-healing algorithm: if a target node receives a {\displaystyle put(k,data)} put(k,data) message, but believes that {\displaystyle k} k is out of its handled range and a closer node (in terms of DHT keyspace) is known, the message is forwarded to that node. Otherwise, data are indexed locally. This leads to a somewhat self-balancing DHT behavior. Of course, such an algorithm requires nodes to publish their presence data in the DHT so the iterative lookups can be performed.
Examples[edit]
DHT protocols and implementations
Aerospike
Apache Cassandra
BATON Overlay
Mainline DHT - Standard DHT used by BitTorrent (based on Kademlia as provided by Khashmir[19])
CAN (Content Addressable Network)
Chord
Koorde
Kademlia
Pastry
P-Grid
Riak
Tapestry
TomP2P
Voldemort
Applications employing DHTs
BTDigg: BitTorrent DHT search engine
cjdns: routing engine for mesh-based networks
CloudSNAP: a decentralized web application deployment platform
Codeen: web caching
Coral Content Distribution Network
FAROO: peer-to-peer Web search engine
Freenet: a censorship-resistant anonymous network
GlusterFS: a distributed file system used for storage virtualization
GNUnet: Freenet-like distribution network including a DHT implementation
I2P: An open-source anonymous peer-to-peer network.
I2P-Bote: serverless secure anonymous e-mail.
IPFS: A content-addressable, peer-to-peer hypermedia distribution protocol
JXTA: open-source P2P platform
Oracle Coherence: an in-memory data grid built on top of a Java DHT implementation
Perfect Dark: a peer-to-peer file-sharing application from Japan
Retroshare: a Friend-to-friend network[20]
Ring: a privacy-preserving voice, video and chat communication platform, based on a Kademlia-like DHT
Tox: an instant messaging system intended to function as a Skype replacement
Twister: a microblogging peer-to-peer platform
YaCy: a distributed search engine
See also[edit]
icon	Computer Science portal
Couchbase Server: a persistent, replicated, clustered distributed object storage system compatible with memcached protocol.
Memcached: a high-performance, distributed memory object caching system.
Prefix hash tree: sophisticated querying over DHTs.
Merkle tree: tree having every non-leaf node labelled with the hash of the labels of its children nodes.
Most distributed data stores employ some form of DHT for lookup.
References[edit]
Jump up ^ Searching in a Small World Chapters 1 & 2 (PDF), retrieved 2012-01-10
Jump up ^ "Section 5.2.2", A Distributed Decentralized Information Storage and Retrieval System (PDF), retrieved 2012-01-10
Jump up ^ Ratnasamy; et al. (2001). "A Scalable Content-Addressable Network" (PDF). In Proceedings of ACM SIGCOMM 2001. Retrieved 2013-05-20.
Jump up ^ Hari Balakrishnan, M. Frans Kaashoek, David Karger, Robert Morris, and Ion Stoica. Looking up data in P2P systems. In Communications of the ACM, February 2003.
Jump up ^ David Cohen (October 1, 2002). "New P2P network funded by US government". New Scientist. Retrieved November 10, 2013.
Jump up ^ "MIT, Berkeley, ICSI, NYU, and Rice Launch the IRIS Project". Press release. MIT. September 25, 2002. Retrieved November 10, 2013.
Jump up ^ Guido Urdaneta, Guillaume Pierre and Maarten van Steen. A Survey of DHT Security Techniques. ACM Computing Surveys 43(2), January 2011.
Jump up ^ Moni Naor and Udi Wieder. Novel Architectures for P2P Applications: the Continuous-Discrete Approach. Proc. SPAA, 2003.
Jump up ^ Gurmeet Singh Manku. Dipsea: A Modular Distributed Hash Table. Ph. D. Thesis (Stanford University), August 2004.
Jump up ^ Agostino Forestiero, Emilio Leonardi, Carlo Mastroianni and Michela Meo. Self-Chord: a Bio-Inspired P2P Framework for Self-Organizing Distributed Systems. IEEE/ACM Transactions on Networking, 2010.
Jump up ^ The (Degree,Diameter) Problem for Graphs, Maite71.upc.es, retrieved 2012-01-10
Jump up ^ Gurmeet Singh Manku, Moni Naor, and Udi Wieder. Know thy Neighbor's Neighbor: the Power of Lookahead in Randomized P2P Networks. Proc. STOC, 2004.
Jump up ^ Ali Ghodsi. Distributed k-ary System: Algorithms for Distributed Hash Tables Archived May 22, 2007, at the Wayback Machine.. KTH-Royal Institute of Technology, 2006.
Jump up ^ Miguel Castro, Manuel Costa, and Antony Rowstron. Should we build Gnutella on a structured overlay?. Computer Communication Review, 2004.
Jump up ^ Domenico Talia and Paolo Trunfio. Enabling Dynamic Querying over Distributed Hash Tables. Journal of Parallel and Distributed Computing, 2010.
Jump up ^ Baruch Awerbuch, Christian Scheideler. "Towards a scalable and robust DHT". 2006. doi:10.1145/1148109.1148163
Jump up ^ Maxwell Young; Aniket Kate; Ian Goldberg; Martin Karsten. "Practical Robust Communication in DHTs Tolerating a Byzantine Adversary".
Jump up ^ Natalya Fedotova; Giordano Orzetti; Luca Veltri; Alessandro Zaccagnini. "Byzantine agreement for reputation management in DHT-based peer-to-peer networks". doi:10.1109/ICTEL.2008.4652638
Jump up ^ Tribler wiki Archived December 4, 2010, at the Wayback Machine. retrieved January 2010.
Jump up ^ Retroshare FAQ retrieved December 2011